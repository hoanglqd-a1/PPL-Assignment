# Generated from c:/coding/PPL/Assignment1/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,52,449,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,4,4,131,8,4,11,4,
        12,4,132,1,4,1,4,1,5,1,5,1,5,1,5,5,5,141,8,5,10,5,12,5,144,9,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,153,8,6,10,6,12,6,156,9,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,288,8,27,1,28,1,
        28,1,28,1,28,1,28,3,28,295,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,3,29,309,8,29,1,30,1,30,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,
        45,1,45,1,46,4,46,344,8,46,11,46,12,46,345,1,46,1,46,4,46,350,8,
        46,11,46,12,46,351,3,46,354,8,46,1,46,1,46,3,46,358,8,46,1,46,4,
        46,361,8,46,11,46,12,46,362,3,46,365,8,46,1,47,1,47,1,47,5,47,370,
        8,47,10,47,12,47,373,9,47,3,47,375,8,47,1,48,1,48,1,48,4,48,380,
        8,48,11,48,12,48,381,1,49,1,49,1,49,4,49,387,8,49,11,49,12,49,388,
        1,50,1,50,1,50,4,50,394,8,50,11,50,12,50,395,1,51,1,51,1,51,1,51,
        3,51,402,8,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,5,54,412,8,
        54,10,54,12,54,415,9,54,1,54,1,54,1,55,1,55,5,55,421,8,55,10,55,
        12,55,424,9,55,1,56,1,56,1,57,1,57,1,57,5,57,431,8,57,10,57,12,57,
        434,9,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,443,8,58,10,58,
        12,58,446,9,58,1,58,1,58,1,154,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,0,93,46,95,0,97,0,99,0,101,0,103,
        47,105,0,107,0,109,48,111,49,113,50,115,51,117,52,1,0,16,3,0,9,9,
        13,13,32,32,1,0,10,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,
        1,0,49,57,2,0,66,66,98,98,1,0,48,49,2,0,79,79,111,111,1,0,48,55,
        2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,34,34,92,92,5,0,34,
        34,92,92,110,110,114,114,116,116,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,478,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,0,89,1,0,0,0,0,93,1,0,0,0,0,103,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,
        3,122,1,0,0,0,5,125,1,0,0,0,7,127,1,0,0,0,9,130,1,0,0,0,11,136,1,
        0,0,0,13,147,1,0,0,0,15,160,1,0,0,0,17,163,1,0,0,0,19,168,1,0,0,
        0,21,172,1,0,0,0,23,179,1,0,0,0,25,184,1,0,0,0,27,189,1,0,0,0,29,
        196,1,0,0,0,31,206,1,0,0,0,33,213,1,0,0,0,35,217,1,0,0,0,37,223,
        1,0,0,0,39,231,1,0,0,0,41,237,1,0,0,0,43,241,1,0,0,0,45,250,1,0,
        0,0,47,256,1,0,0,0,49,262,1,0,0,0,51,266,1,0,0,0,53,271,1,0,0,0,
        55,287,1,0,0,0,57,294,1,0,0,0,59,308,1,0,0,0,61,310,1,0,0,0,63,312,
        1,0,0,0,65,314,1,0,0,0,67,316,1,0,0,0,69,318,1,0,0,0,71,320,1,0,
        0,0,73,322,1,0,0,0,75,324,1,0,0,0,77,326,1,0,0,0,79,328,1,0,0,0,
        81,330,1,0,0,0,83,332,1,0,0,0,85,334,1,0,0,0,87,336,1,0,0,0,89,338,
        1,0,0,0,91,340,1,0,0,0,93,343,1,0,0,0,95,374,1,0,0,0,97,376,1,0,
        0,0,99,383,1,0,0,0,101,390,1,0,0,0,103,401,1,0,0,0,105,403,1,0,0,
        0,107,405,1,0,0,0,109,408,1,0,0,0,111,418,1,0,0,0,113,425,1,0,0,
        0,115,427,1,0,0,0,117,439,1,0,0,0,119,120,5,124,0,0,120,121,5,124,
        0,0,121,2,1,0,0,0,122,123,5,38,0,0,123,124,5,38,0,0,124,4,1,0,0,
        0,125,126,5,33,0,0,126,6,1,0,0,0,127,128,5,10,0,0,128,8,1,0,0,0,
        129,131,7,0,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,
        132,133,1,0,0,0,133,134,1,0,0,0,134,135,6,4,0,0,135,10,1,0,0,0,136,
        137,5,47,0,0,137,138,5,47,0,0,138,142,1,0,0,0,139,141,8,1,0,0,140,
        139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,
        145,1,0,0,0,144,142,1,0,0,0,145,146,5,10,0,0,146,12,1,0,0,0,147,
        148,5,47,0,0,148,149,5,42,0,0,149,154,1,0,0,0,150,153,9,0,0,0,151,
        153,3,13,6,0,152,150,1,0,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,
        155,1,0,0,0,154,152,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,
        158,5,42,0,0,158,159,5,47,0,0,159,14,1,0,0,0,160,161,5,105,0,0,161,
        162,5,102,0,0,162,16,1,0,0,0,163,164,5,101,0,0,164,165,5,108,0,0,
        165,166,5,115,0,0,166,167,5,101,0,0,167,18,1,0,0,0,168,169,5,102,
        0,0,169,170,5,111,0,0,170,171,5,114,0,0,171,20,1,0,0,0,172,173,5,
        114,0,0,173,174,5,101,0,0,174,175,5,116,0,0,175,176,5,117,0,0,176,
        177,5,114,0,0,177,178,5,110,0,0,178,22,1,0,0,0,179,180,5,102,0,0,
        180,181,5,117,0,0,181,182,5,110,0,0,182,183,5,99,0,0,183,24,1,0,
        0,0,184,185,5,116,0,0,185,186,5,121,0,0,186,187,5,112,0,0,187,188,
        5,101,0,0,188,26,1,0,0,0,189,190,5,115,0,0,190,191,5,116,0,0,191,
        192,5,114,0,0,192,193,5,117,0,0,193,194,5,99,0,0,194,195,5,116,0,
        0,195,28,1,0,0,0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,116,
        0,0,199,200,5,101,0,0,200,201,5,114,0,0,201,202,5,102,0,0,202,203,
        5,97,0,0,203,204,5,99,0,0,204,205,5,101,0,0,205,30,1,0,0,0,206,207,
        5,115,0,0,207,208,5,116,0,0,208,209,5,114,0,0,209,210,5,105,0,0,
        210,211,5,110,0,0,211,212,5,103,0,0,212,32,1,0,0,0,213,214,5,105,
        0,0,214,215,5,110,0,0,215,216,5,116,0,0,216,34,1,0,0,0,217,218,5,
        102,0,0,218,219,5,108,0,0,219,220,5,111,0,0,220,221,5,97,0,0,221,
        222,5,116,0,0,222,36,1,0,0,0,223,224,5,98,0,0,224,225,5,111,0,0,
        225,226,5,111,0,0,226,227,5,108,0,0,227,228,5,101,0,0,228,229,5,
        97,0,0,229,230,5,110,0,0,230,38,1,0,0,0,231,232,5,99,0,0,232,233,
        5,111,0,0,233,234,5,110,0,0,234,235,5,115,0,0,235,236,5,116,0,0,
        236,40,1,0,0,0,237,238,5,118,0,0,238,239,5,97,0,0,239,240,5,114,
        0,0,240,42,1,0,0,0,241,242,5,99,0,0,242,243,5,111,0,0,243,244,5,
        110,0,0,244,245,5,116,0,0,245,246,5,105,0,0,246,247,5,110,0,0,247,
        248,5,117,0,0,248,249,5,101,0,0,249,44,1,0,0,0,250,251,5,98,0,0,
        251,252,5,114,0,0,252,253,5,101,0,0,253,254,5,97,0,0,254,255,5,107,
        0,0,255,46,1,0,0,0,256,257,5,114,0,0,257,258,5,97,0,0,258,259,5,
        110,0,0,259,260,5,103,0,0,260,261,5,101,0,0,261,48,1,0,0,0,262,263,
        5,110,0,0,263,264,5,105,0,0,264,265,5,108,0,0,265,50,1,0,0,0,266,
        267,5,116,0,0,267,268,5,114,0,0,268,269,5,117,0,0,269,270,5,101,
        0,0,270,52,1,0,0,0,271,272,5,102,0,0,272,273,5,97,0,0,273,274,5,
        108,0,0,274,275,5,115,0,0,275,276,5,101,0,0,276,54,1,0,0,0,277,278,
        5,61,0,0,278,288,5,61,0,0,279,280,5,33,0,0,280,288,5,61,0,0,281,
        288,5,60,0,0,282,283,5,60,0,0,283,288,5,61,0,0,284,288,5,62,0,0,
        285,286,5,62,0,0,286,288,5,61,0,0,287,277,1,0,0,0,287,279,1,0,0,
        0,287,281,1,0,0,0,287,282,1,0,0,0,287,284,1,0,0,0,287,285,1,0,0,
        0,288,56,1,0,0,0,289,290,5,38,0,0,290,295,5,38,0,0,291,292,5,124,
        0,0,292,295,5,124,0,0,293,295,5,33,0,0,294,289,1,0,0,0,294,291,1,
        0,0,0,294,293,1,0,0,0,295,58,1,0,0,0,296,297,5,58,0,0,297,309,5,
        61,0,0,298,299,5,43,0,0,299,309,5,61,0,0,300,301,5,45,0,0,301,309,
        5,61,0,0,302,303,5,42,0,0,303,309,5,61,0,0,304,305,5,47,0,0,305,
        309,5,61,0,0,306,307,5,37,0,0,307,309,5,61,0,0,308,296,1,0,0,0,308,
        298,1,0,0,0,308,300,1,0,0,0,308,302,1,0,0,0,308,304,1,0,0,0,308,
        306,1,0,0,0,309,60,1,0,0,0,310,311,5,46,0,0,311,62,1,0,0,0,312,313,
        5,61,0,0,313,64,1,0,0,0,314,315,5,43,0,0,315,66,1,0,0,0,316,317,
        5,45,0,0,317,68,1,0,0,0,318,319,5,42,0,0,319,70,1,0,0,0,320,321,
        5,47,0,0,321,72,1,0,0,0,322,323,5,37,0,0,323,74,1,0,0,0,324,325,
        5,40,0,0,325,76,1,0,0,0,326,327,5,41,0,0,327,78,1,0,0,0,328,329,
        5,91,0,0,329,80,1,0,0,0,330,331,5,93,0,0,331,82,1,0,0,0,332,333,
        5,123,0,0,333,84,1,0,0,0,334,335,5,125,0,0,335,86,1,0,0,0,336,337,
        5,44,0,0,337,88,1,0,0,0,338,339,5,59,0,0,339,90,1,0,0,0,340,341,
        7,2,0,0,341,92,1,0,0,0,342,344,3,91,45,0,343,342,1,0,0,0,344,345,
        1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,353,
        5,46,0,0,348,350,3,91,45,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,
        1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,349,1,0,0,0,353,354,
        1,0,0,0,354,364,1,0,0,0,355,357,7,3,0,0,356,358,7,4,0,0,357,356,
        1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,361,3,91,45,0,360,359,
        1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,365,
        1,0,0,0,364,355,1,0,0,0,364,365,1,0,0,0,365,94,1,0,0,0,366,375,5,
        48,0,0,367,371,7,5,0,0,368,370,7,2,0,0,369,368,1,0,0,0,370,373,1,
        0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,375,1,0,0,0,373,371,1,
        0,0,0,374,366,1,0,0,0,374,367,1,0,0,0,375,96,1,0,0,0,376,377,5,48,
        0,0,377,379,7,6,0,0,378,380,7,7,0,0,379,378,1,0,0,0,380,381,1,0,
        0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,98,1,0,0,0,383,384,5,48,
        0,0,384,386,7,8,0,0,385,387,7,9,0,0,386,385,1,0,0,0,387,388,1,0,
        0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,100,1,0,0,0,390,391,5,48,
        0,0,391,393,7,10,0,0,392,394,7,11,0,0,393,392,1,0,0,0,394,395,1,
        0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,102,1,0,0,0,397,402,3,
        95,47,0,398,402,3,97,48,0,399,402,3,99,49,0,400,402,3,101,50,0,401,
        397,1,0,0,0,401,398,1,0,0,0,401,399,1,0,0,0,401,400,1,0,0,0,402,
        104,1,0,0,0,403,404,8,12,0,0,404,106,1,0,0,0,405,406,5,92,0,0,406,
        407,7,13,0,0,407,108,1,0,0,0,408,413,5,34,0,0,409,412,3,105,52,0,
        410,412,3,107,53,0,411,409,1,0,0,0,411,410,1,0,0,0,412,415,1,0,0,
        0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,413,1,0,0,
        0,416,417,5,34,0,0,417,110,1,0,0,0,418,422,7,14,0,0,419,421,7,15,
        0,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,
        0,0,423,112,1,0,0,0,424,422,1,0,0,0,425,426,9,0,0,0,426,114,1,0,
        0,0,427,432,5,34,0,0,428,431,3,105,52,0,429,431,3,107,53,0,430,428,
        1,0,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,
        1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,436,5,92,0,0,436,437,
        8,13,0,0,437,438,6,57,1,0,438,116,1,0,0,0,439,444,5,34,0,0,440,443,
        3,105,52,0,441,443,3,107,53,0,442,440,1,0,0,0,442,441,1,0,0,0,443,
        446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,
        444,1,0,0,0,447,448,6,58,2,0,448,118,1,0,0,0,27,0,132,142,152,154,
        287,294,308,345,351,353,357,362,364,371,374,381,388,395,401,411,
        413,422,430,432,442,444,3,6,0,0,1,57,0,1,58,1
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NL = 4
    WS = 5
    SINGLE_LINE_CMT = 6
    MULTI_LINE_CMT = 7
    IF_ = 8
    ELSE_ = 9
    FOR_ = 10
    RETURN_ = 11
    FUNC_ = 12
    TYPE_ = 13
    STRUCT_ = 14
    INTERFACE_ = 15
    STRING_ = 16
    INT_ = 17
    FLOAT_ = 18
    BOOLEAN_ = 19
    CONST_ = 20
    VAR_ = 21
    CONTINUE_ = 22
    BREAK_ = 23
    RANGE_ = 24
    NIL_ = 25
    TRUE_ = 26
    FALSE_ = 27
    COMPARISON_OP = 28
    OP3 = 29
    ASSIGN1 = 30
    OP5 = 31
    ASSIGN = 32
    ADD = 33
    SUB = 34
    MUL = 35
    DIV = 36
    MOD = 37
    LPAREN = 38
    RPAREN = 39
    LSB = 40
    RSB = 41
    LCB = 42
    RCB = 43
    COMMA = 44
    SEMICOLON = 45
    FLOAT = 46
    INTEGER = 47
    STRING = 48
    ID = 49
    ERROR_CHAR = 50
    ILLEGAL_ESCAPE = 51
    UNCLOSE_STRING = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'||'", "'&&'", "'!'", "'\\n'", "'if'", "'else'", "'for'", "'return'", 
            "'func'", "'type'", "'struct'", "'interface'", "'string'", "'int'", 
            "'float'", "'boolean'", "'const'", "'var'", "'continue'", "'break'", 
            "'range'", "'nil'", "'true'", "'false'", "'.'", "'='", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'['", "']'", "'{'", 
            "'}'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "WS", "SINGLE_LINE_CMT", "MULTI_LINE_CMT", "IF_", "ELSE_", 
            "FOR_", "RETURN_", "FUNC_", "TYPE_", "STRUCT_", "INTERFACE_", 
            "STRING_", "INT_", "FLOAT_", "BOOLEAN_", "CONST_", "VAR_", "CONTINUE_", 
            "BREAK_", "RANGE_", "NIL_", "TRUE_", "FALSE_", "COMPARISON_OP", 
            "OP3", "ASSIGN1", "OP5", "ASSIGN", "ADD", "SUB", "MUL", "DIV", 
            "MOD", "LPAREN", "RPAREN", "LSB", "RSB", "LCB", "RCB", "COMMA", 
            "SEMICOLON", "FLOAT", "INTEGER", "STRING", "ID", "ERROR_CHAR", 
            "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "NL", "WS", "SINGLE_LINE_CMT", 
                  "MULTI_LINE_CMT", "IF_", "ELSE_", "FOR_", "RETURN_", "FUNC_", 
                  "TYPE_", "STRUCT_", "INTERFACE_", "STRING_", "INT_", "FLOAT_", 
                  "BOOLEAN_", "CONST_", "VAR_", "CONTINUE_", "BREAK_", "RANGE_", 
                  "NIL_", "TRUE_", "FALSE_", "COMPARISON_OP", "OP3", "ASSIGN1", 
                  "OP5", "ASSIGN", "ADD", "SUB", "MUL", "DIV", "MOD", "LPAREN", 
                  "RPAREN", "LSB", "RSB", "LCB", "RCB", "COMMA", "SEMICOLON", 
                  "Digit", "FLOAT", "DecInt", "BinInt", "OctInt", "HexInt", 
                  "INTEGER", "Char", "EscapeChar", "STRING", "ID", "ERROR_CHAR", 
                  "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[57] = self.ILLEGAL_ESCAPE_action 
            actions[58] = self.UNCLOSE_STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.split("\\n")[0][1:]
     


