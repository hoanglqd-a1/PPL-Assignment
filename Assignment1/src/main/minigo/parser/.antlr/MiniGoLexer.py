# Generated from c:/coding/PPL/Assignment1/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,54,461,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,
        4,1,4,1,4,1,4,5,4,138,8,4,10,4,12,4,141,9,4,1,4,3,4,144,8,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,5,5,153,8,5,10,5,12,5,156,9,5,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,7,4,7,166,8,7,11,7,12,7,167,1,7,1,7,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,299,8,28,1,29,1,29,1,29,
        1,29,1,29,3,29,306,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,3,30,318,8,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,48,4,48,356,8,48,11,48,12,48,357,1,48,1,48,4,48,362,8,48,
        11,48,12,48,363,3,48,366,8,48,1,48,1,48,3,48,370,8,48,1,48,4,48,
        373,8,48,11,48,12,48,374,3,48,377,8,48,1,49,1,49,1,49,5,49,382,8,
        49,10,49,12,49,385,9,49,3,49,387,8,49,1,50,1,50,1,50,4,50,392,8,
        50,11,50,12,50,393,1,51,1,51,1,51,4,51,399,8,51,11,51,12,51,400,
        1,52,1,52,1,52,4,52,406,8,52,11,52,12,52,407,1,53,1,53,1,53,1,53,
        3,53,414,8,53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,5,56,424,8,
        56,10,56,12,56,427,9,56,1,56,1,56,1,57,1,57,5,57,433,8,57,10,57,
        12,57,436,9,57,1,58,1,58,1,59,1,59,1,59,5,59,443,8,59,10,59,12,59,
        446,9,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,5,60,455,8,60,10,60,
        12,60,458,9,60,1,60,1,60,1,154,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,0,97,48,99,0,101,0,
        103,0,105,0,107,49,109,0,111,0,113,50,115,51,117,52,119,53,121,54,
        1,0,17,1,0,10,10,1,1,10,10,3,0,9,9,13,13,32,32,1,0,48,57,2,0,69,
        69,101,101,2,0,43,43,45,45,1,0,49,57,2,0,66,66,98,98,1,0,48,49,2,
        0,79,79,111,111,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,
        2,0,34,34,92,92,5,0,34,34,92,92,110,110,114,114,116,116,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,489,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,97,1,0,0,0,0,107,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,126,1,0,0,0,
        5,129,1,0,0,0,7,131,1,0,0,0,9,133,1,0,0,0,11,147,1,0,0,0,13,162,
        1,0,0,0,15,165,1,0,0,0,17,171,1,0,0,0,19,174,1,0,0,0,21,179,1,0,
        0,0,23,183,1,0,0,0,25,190,1,0,0,0,27,195,1,0,0,0,29,200,1,0,0,0,
        31,207,1,0,0,0,33,217,1,0,0,0,35,224,1,0,0,0,37,228,1,0,0,0,39,234,
        1,0,0,0,41,242,1,0,0,0,43,248,1,0,0,0,45,252,1,0,0,0,47,261,1,0,
        0,0,49,267,1,0,0,0,51,273,1,0,0,0,53,277,1,0,0,0,55,282,1,0,0,0,
        57,298,1,0,0,0,59,305,1,0,0,0,61,317,1,0,0,0,63,319,1,0,0,0,65,322,
        1,0,0,0,67,324,1,0,0,0,69,326,1,0,0,0,71,328,1,0,0,0,73,330,1,0,
        0,0,75,332,1,0,0,0,77,334,1,0,0,0,79,336,1,0,0,0,81,338,1,0,0,0,
        83,340,1,0,0,0,85,342,1,0,0,0,87,344,1,0,0,0,89,346,1,0,0,0,91,348,
        1,0,0,0,93,350,1,0,0,0,95,352,1,0,0,0,97,355,1,0,0,0,99,386,1,0,
        0,0,101,388,1,0,0,0,103,395,1,0,0,0,105,402,1,0,0,0,107,413,1,0,
        0,0,109,415,1,0,0,0,111,417,1,0,0,0,113,420,1,0,0,0,115,430,1,0,
        0,0,117,437,1,0,0,0,119,439,1,0,0,0,121,451,1,0,0,0,123,124,5,124,
        0,0,124,125,5,124,0,0,125,2,1,0,0,0,126,127,5,38,0,0,127,128,5,38,
        0,0,128,4,1,0,0,0,129,130,5,33,0,0,130,6,1,0,0,0,131,132,5,58,0,
        0,132,8,1,0,0,0,133,134,5,47,0,0,134,135,5,47,0,0,135,139,1,0,0,
        0,136,138,8,0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,
        0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,142,144,7,1,0,
        0,143,142,1,0,0,0,144,145,1,0,0,0,145,146,6,4,0,0,146,10,1,0,0,0,
        147,148,5,47,0,0,148,149,5,42,0,0,149,154,1,0,0,0,150,153,3,11,5,
        0,151,153,9,0,0,0,152,150,1,0,0,0,152,151,1,0,0,0,153,156,1,0,0,
        0,154,155,1,0,0,0,154,152,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,
        0,157,158,5,42,0,0,158,159,5,47,0,0,159,160,1,0,0,0,160,161,6,5,
        0,0,161,12,1,0,0,0,162,163,5,10,0,0,163,14,1,0,0,0,164,166,7,2,0,
        0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,
        0,168,169,1,0,0,0,169,170,6,7,0,0,170,16,1,0,0,0,171,172,5,105,0,
        0,172,173,5,102,0,0,173,18,1,0,0,0,174,175,5,101,0,0,175,176,5,108,
        0,0,176,177,5,115,0,0,177,178,5,101,0,0,178,20,1,0,0,0,179,180,5,
        102,0,0,180,181,5,111,0,0,181,182,5,114,0,0,182,22,1,0,0,0,183,184,
        5,114,0,0,184,185,5,101,0,0,185,186,5,116,0,0,186,187,5,117,0,0,
        187,188,5,114,0,0,188,189,5,110,0,0,189,24,1,0,0,0,190,191,5,102,
        0,0,191,192,5,117,0,0,192,193,5,110,0,0,193,194,5,99,0,0,194,26,
        1,0,0,0,195,196,5,116,0,0,196,197,5,121,0,0,197,198,5,112,0,0,198,
        199,5,101,0,0,199,28,1,0,0,0,200,201,5,115,0,0,201,202,5,116,0,0,
        202,203,5,114,0,0,203,204,5,117,0,0,204,205,5,99,0,0,205,206,5,116,
        0,0,206,30,1,0,0,0,207,208,5,105,0,0,208,209,5,110,0,0,209,210,5,
        116,0,0,210,211,5,101,0,0,211,212,5,114,0,0,212,213,5,102,0,0,213,
        214,5,97,0,0,214,215,5,99,0,0,215,216,5,101,0,0,216,32,1,0,0,0,217,
        218,5,115,0,0,218,219,5,116,0,0,219,220,5,114,0,0,220,221,5,105,
        0,0,221,222,5,110,0,0,222,223,5,103,0,0,223,34,1,0,0,0,224,225,5,
        105,0,0,225,226,5,110,0,0,226,227,5,116,0,0,227,36,1,0,0,0,228,229,
        5,102,0,0,229,230,5,108,0,0,230,231,5,111,0,0,231,232,5,97,0,0,232,
        233,5,116,0,0,233,38,1,0,0,0,234,235,5,98,0,0,235,236,5,111,0,0,
        236,237,5,111,0,0,237,238,5,108,0,0,238,239,5,101,0,0,239,240,5,
        97,0,0,240,241,5,110,0,0,241,40,1,0,0,0,242,243,5,99,0,0,243,244,
        5,111,0,0,244,245,5,110,0,0,245,246,5,115,0,0,246,247,5,116,0,0,
        247,42,1,0,0,0,248,249,5,118,0,0,249,250,5,97,0,0,250,251,5,114,
        0,0,251,44,1,0,0,0,252,253,5,99,0,0,253,254,5,111,0,0,254,255,5,
        110,0,0,255,256,5,116,0,0,256,257,5,105,0,0,257,258,5,110,0,0,258,
        259,5,117,0,0,259,260,5,101,0,0,260,46,1,0,0,0,261,262,5,98,0,0,
        262,263,5,114,0,0,263,264,5,101,0,0,264,265,5,97,0,0,265,266,5,107,
        0,0,266,48,1,0,0,0,267,268,5,114,0,0,268,269,5,97,0,0,269,270,5,
        110,0,0,270,271,5,103,0,0,271,272,5,101,0,0,272,50,1,0,0,0,273,274,
        5,110,0,0,274,275,5,105,0,0,275,276,5,108,0,0,276,52,1,0,0,0,277,
        278,5,116,0,0,278,279,5,114,0,0,279,280,5,117,0,0,280,281,5,101,
        0,0,281,54,1,0,0,0,282,283,5,102,0,0,283,284,5,97,0,0,284,285,5,
        108,0,0,285,286,5,115,0,0,286,287,5,101,0,0,287,56,1,0,0,0,288,289,
        5,61,0,0,289,299,5,61,0,0,290,291,5,33,0,0,291,299,5,61,0,0,292,
        299,5,60,0,0,293,294,5,60,0,0,294,299,5,61,0,0,295,299,5,62,0,0,
        296,297,5,62,0,0,297,299,5,61,0,0,298,288,1,0,0,0,298,290,1,0,0,
        0,298,292,1,0,0,0,298,293,1,0,0,0,298,295,1,0,0,0,298,296,1,0,0,
        0,299,58,1,0,0,0,300,301,5,38,0,0,301,306,5,38,0,0,302,303,5,124,
        0,0,303,306,5,124,0,0,304,306,5,33,0,0,305,300,1,0,0,0,305,302,1,
        0,0,0,305,304,1,0,0,0,306,60,1,0,0,0,307,308,5,43,0,0,308,318,5,
        61,0,0,309,310,5,45,0,0,310,318,5,61,0,0,311,312,5,42,0,0,312,318,
        5,61,0,0,313,314,5,47,0,0,314,318,5,61,0,0,315,316,5,37,0,0,316,
        318,5,61,0,0,317,307,1,0,0,0,317,309,1,0,0,0,317,311,1,0,0,0,317,
        313,1,0,0,0,317,315,1,0,0,0,318,62,1,0,0,0,319,320,5,58,0,0,320,
        321,5,61,0,0,321,64,1,0,0,0,322,323,5,46,0,0,323,66,1,0,0,0,324,
        325,5,61,0,0,325,68,1,0,0,0,326,327,5,43,0,0,327,70,1,0,0,0,328,
        329,5,45,0,0,329,72,1,0,0,0,330,331,5,42,0,0,331,74,1,0,0,0,332,
        333,5,47,0,0,333,76,1,0,0,0,334,335,5,37,0,0,335,78,1,0,0,0,336,
        337,5,40,0,0,337,80,1,0,0,0,338,339,5,41,0,0,339,82,1,0,0,0,340,
        341,5,91,0,0,341,84,1,0,0,0,342,343,5,93,0,0,343,86,1,0,0,0,344,
        345,5,123,0,0,345,88,1,0,0,0,346,347,5,125,0,0,347,90,1,0,0,0,348,
        349,5,44,0,0,349,92,1,0,0,0,350,351,5,59,0,0,351,94,1,0,0,0,352,
        353,7,3,0,0,353,96,1,0,0,0,354,356,3,95,47,0,355,354,1,0,0,0,356,
        357,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,
        365,5,46,0,0,360,362,3,95,47,0,361,360,1,0,0,0,362,363,1,0,0,0,363,
        361,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,361,1,0,0,0,365,
        366,1,0,0,0,366,376,1,0,0,0,367,369,7,4,0,0,368,370,7,5,0,0,369,
        368,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,373,3,95,47,0,372,
        371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,
        377,1,0,0,0,376,367,1,0,0,0,376,377,1,0,0,0,377,98,1,0,0,0,378,387,
        5,48,0,0,379,383,7,6,0,0,380,382,7,3,0,0,381,380,1,0,0,0,382,385,
        1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,387,1,0,0,0,385,383,
        1,0,0,0,386,378,1,0,0,0,386,379,1,0,0,0,387,100,1,0,0,0,388,389,
        5,48,0,0,389,391,7,7,0,0,390,392,7,8,0,0,391,390,1,0,0,0,392,393,
        1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,102,1,0,0,0,395,396,
        5,48,0,0,396,398,7,9,0,0,397,399,7,10,0,0,398,397,1,0,0,0,399,400,
        1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,104,1,0,0,0,402,403,
        5,48,0,0,403,405,7,11,0,0,404,406,7,12,0,0,405,404,1,0,0,0,406,407,
        1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,106,1,0,0,0,409,414,
        3,99,49,0,410,414,3,101,50,0,411,414,3,103,51,0,412,414,3,105,52,
        0,413,409,1,0,0,0,413,410,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,
        0,414,108,1,0,0,0,415,416,8,13,0,0,416,110,1,0,0,0,417,418,5,92,
        0,0,418,419,7,14,0,0,419,112,1,0,0,0,420,425,5,34,0,0,421,424,3,
        109,54,0,422,424,3,111,55,0,423,421,1,0,0,0,423,422,1,0,0,0,424,
        427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,
        425,1,0,0,0,428,429,5,34,0,0,429,114,1,0,0,0,430,434,7,15,0,0,431,
        433,7,16,0,0,432,431,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,
        435,1,0,0,0,435,116,1,0,0,0,436,434,1,0,0,0,437,438,9,0,0,0,438,
        118,1,0,0,0,439,444,5,34,0,0,440,443,3,109,54,0,441,443,3,111,55,
        0,442,440,1,0,0,0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,
        0,444,445,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,92,0,
        0,448,449,8,14,0,0,449,450,6,59,1,0,450,120,1,0,0,0,451,456,5,34,
        0,0,452,455,3,109,54,0,453,455,3,111,55,0,454,452,1,0,0,0,454,453,
        1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,
        1,0,0,0,458,456,1,0,0,0,459,460,6,60,2,0,460,122,1,0,0,0,28,0,139,
        143,152,154,167,298,305,317,357,363,365,369,374,376,383,386,393,
        400,407,413,423,425,434,442,444,454,456,3,6,0,0,1,59,0,1,60,1
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    SINGLE_LINE_CMT = 5
    MULTI_LINE_CMT = 6
    NL = 7
    WS = 8
    IF_ = 9
    ELSE_ = 10
    FOR_ = 11
    RETURN_ = 12
    FUNC_ = 13
    TYPE_ = 14
    STRUCT_ = 15
    INTERFACE_ = 16
    STRING_ = 17
    INT_ = 18
    FLOAT_ = 19
    BOOLEAN_ = 20
    CONST_ = 21
    VAR_ = 22
    CONTINUE_ = 23
    BREAK_ = 24
    RANGE_ = 25
    NIL_ = 26
    TRUE_ = 27
    FALSE_ = 28
    COMPARISON_OP = 29
    BOOLEAN_OP = 30
    UPT_ASSIGN = 31
    ASSIGN = 32
    DOT = 33
    INIT = 34
    ADD = 35
    SUB = 36
    MUL = 37
    DIV = 38
    MOD = 39
    LPAREN = 40
    RPAREN = 41
    LSB = 42
    RSB = 43
    LCB = 44
    RCB = 45
    COMMA = 46
    SEMICOLON = 47
    FLOAT = 48
    INTEGER = 49
    STRING = 50
    ID = 51
    ERROR_CHAR = 52
    ILLEGAL_ESCAPE = 53
    UNCLOSE_STRING = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'||'", "'&&'", "'!'", "':'", "'\\n'", "'if'", "'else'", "'for'", 
            "'return'", "'func'", "'type'", "'struct'", "'interface'", "'string'", 
            "'int'", "'float'", "'boolean'", "'const'", "'var'", "'continue'", 
            "'break'", "'range'", "'nil'", "'true'", "'false'", "':='", 
            "'.'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", 
            "'['", "']'", "'{'", "'}'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "SINGLE_LINE_CMT", "MULTI_LINE_CMT", "NL", "WS", "IF_", "ELSE_", 
            "FOR_", "RETURN_", "FUNC_", "TYPE_", "STRUCT_", "INTERFACE_", 
            "STRING_", "INT_", "FLOAT_", "BOOLEAN_", "CONST_", "VAR_", "CONTINUE_", 
            "BREAK_", "RANGE_", "NIL_", "TRUE_", "FALSE_", "COMPARISON_OP", 
            "BOOLEAN_OP", "UPT_ASSIGN", "ASSIGN", "DOT", "INIT", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "LPAREN", "RPAREN", "LSB", "RSB", 
            "LCB", "RCB", "COMMA", "SEMICOLON", "FLOAT", "INTEGER", "STRING", 
            "ID", "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "SINGLE_LINE_CMT", "MULTI_LINE_CMT", 
                  "NL", "WS", "IF_", "ELSE_", "FOR_", "RETURN_", "FUNC_", 
                  "TYPE_", "STRUCT_", "INTERFACE_", "STRING_", "INT_", "FLOAT_", 
                  "BOOLEAN_", "CONST_", "VAR_", "CONTINUE_", "BREAK_", "RANGE_", 
                  "NIL_", "TRUE_", "FALSE_", "COMPARISON_OP", "BOOLEAN_OP", 
                  "UPT_ASSIGN", "ASSIGN", "DOT", "INIT", "ADD", "SUB", "MUL", 
                  "DIV", "MOD", "LPAREN", "RPAREN", "LSB", "RSB", "LCB", 
                  "RCB", "COMMA", "SEMICOLON", "Digit", "FLOAT", "DecInt", 
                  "BinInt", "OctInt", "HexInt", "INTEGER", "Char", "EscapeChar", 
                  "STRING", "ID", "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[59] = self.ILLEGAL_ESCAPE_action 
            actions[60] = self.UNCLOSE_STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.split("\\n")[0][1:]
     


