    #     def test_001(self):
#         """
# var VoTien = 1; 
# var VoTien = 2;
#         """
#         input = Program([VarDecl("VoTien", None, IntLiteral(1)),
#                         VarDecl("VoTien", None, IntLiteral(2))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Variable: VoTien\n", inspect.stack()[0].function))

#     def test_002(self):
#         """
# var VoTien = 1; 
# const VoTien = 2;
#         """
#         input = Program([VarDecl("VoTien", None, IntLiteral(1)),
#                         ConstDecl("VoTien", None, IntLiteral(2))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Constant: VoTien\n", inspect.stack()[0].function))

#     def test_003(self):
#         """
# const VoTien = 1; 
# var VoTien = 2;
#         """
#         input = Program([ConstDecl("VoTien", None, IntLiteral(1)),
#                         VarDecl("VoTien", None, IntLiteral(2))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Variable: VoTien\n", inspect.stack()[0].function))

#     def test_004(self):
#         """
# const VoTien = 1; 
# func VoTien () {return;}
#         """
#         input = Program([ConstDecl("VoTien", None, IntLiteral(1)), FuncDecl(
#             "VoTien", [], VoidType(), Block([Return(None)]))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Function: VoTien\n", inspect.stack()[0].function))

#     def test_005(self):
#         """ 
# func VoTien () {return;}
# var VoTien = 1;
#         """
#         input = Program([FuncDecl("VoTien", [], VoidType(), Block(
#             [Return(None)])), VarDecl("VoTien", None, IntLiteral(1))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Variable: VoTien\n", inspect.stack()[0].function))

#     def test_006(self):
#         """ 
# var getInt = 1;
#         """
#         input = Program([VarDecl("getInt", None, IntLiteral(1))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Variable: getInt\n", inspect.stack()[0].function))

#     def test_007(self):
#         """ 
# type  Votien struct {
# Votien int;
# }
# type TIEN struct {
# Votien string;
# TIEN int;
# TIEN float;
# }
#         """
#         input = Program([StructType("Votien", [("Votien", IntType())], []), StructType(
#             "TIEN", [("Votien", StringType()), ("TIEN", IntType()), ("TIEN", FloatType())], [])])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Field: TIEN\n", inspect.stack()[0].function))

#     def test_008(self):
#         """ 
# func (v TIEN) putIntLn () {return;}
# func (v TIEN) getInt () {return;}
# func (v TIEN) getInt () {return;}
# type TIEN struct {
# Votien int;
# }
#         """
#         input = Program([MethodDecl("v", Id("TIEN"), FuncDecl("putIntLn", [], VoidType(), Block([Return(None)]))), MethodDecl("v", Id("TIEN"), FuncDecl("getInt", [], VoidType(
#         ), Block([Return(None)]))), MethodDecl("v", Id("TIEN"), FuncDecl("getInt", [], VoidType(), Block([Return(None)]))), StructType("TIEN", [("Votien", IntType())], [])])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Method: getInt\n", inspect.stack()[0].function))

#     def test_009(self):
#         """ 
# type VoTien interface {
# VoTien ();
# VoTien (a int);
# }
#         """
#         input = Program([InterfaceType("VoTien", [Prototype(
#             "VoTien", [], VoidType()), Prototype("VoTien", [IntType()], VoidType())])])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Prototype: VoTien\n", inspect.stack()[0].function))

#     def test_010(self):
#         """ 
# func Votien (a, a int) {return;}
#         """
#         input = Program([FuncDecl("Votien", [ParamDecl("a", IntType()), ParamDecl(
#             "a", IntType())], VoidType(), Block([Return(None)]))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Parameter: a\n", inspect.stack()[0].function))

#     def test_011(self):
#         """ 
# func Votien (b int) {
# var b = 1;
# var a = 1;
# const a = 1;
# }
#         """
#         input = Program([FuncDecl("Votien", [ParamDecl("b", IntType())], VoidType(), Block([VarDecl(
#             "b", None, IntLiteral(1)), VarDecl("a", None, IntLiteral(1)), ConstDecl("a", None, IntLiteral(1))]))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Constant: a\n", inspect.stack()[0].function))

#     def test_012(self):
#         """ 
# func Votien (b int) {
#     for var a = 1; a < 1; a += 1 {
#         const a = 2;
#     }
# }
#         """
#         input = Program([FuncDecl("Votien", [ParamDecl("b", IntType())], VoidType(), Block([ForStep(VarDecl("a", None, IntLiteral(1)), BinaryOp(
#             "<", Id("a"), IntLiteral(1)), Assign(Id("a"), BinaryOp("+", Id("a"), IntLiteral(1))), Block([ConstDecl("a", None, IntLiteral(2))]))]))])
#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Constant: a\n", inspect.stack()[0].function))

#     def test_013(self):
#         """ 
# var a = 1;
# var b = a;
# var c = d;
#         """
#         input = Program([VarDecl("a", None, IntLiteral(1)), VarDecl(
#             "b", None, Id("a")), VarDecl("c", None, Id("d"))])
#         self.assertTrue(TestChecker.test(
#             input, "Undeclared Identifier: d\n", inspect.stack()[0].function))

#     def test_014(self):
#         """ 
# func Votien () int {return 1;}

# fun foo () {
# var b = Votien();
# foo_votine();
# return;
# }
#         """
#         input = Program([FuncDecl("Votien", [], IntType(), Block([Return(IntLiteral(1))])), FuncDecl(
#             "foo", [], VoidType(), Block([VarDecl("b", None, FuncCall("Votien", [])), FuncCall("foo_votine", []), Return(None)]))])
#         self.assertTrue(TestChecker.test(
#             input, "Undeclared Function: foo_votine\n", inspect.stack()[0].function))

#     def test_015(self):
#         """ 
 
# type TIEN struct {
#     Votien int;
# }

# func (v TIEN) getInt () {
#     const c = v.Votien;
#     var d = v.tien;
# }
        
#         """
#         input = Program([StructType("TIEN",[("Votien",IntType())],[]),MethodDecl("v",Id("TIEN"),FuncDecl("getInt",[],VoidType(),Block([ConstDecl("c",None,FieldAccess(Id("v"),"Votien")),VarDecl("d", None,FieldAccess(Id("v"),"tien"))])))])
#         self.assertTrue(TestChecker.test(
#             input, "Undeclared Field: tien\n", inspect.stack()[0].function))

#     def test_016(self):
#         """ 
# type TIEN struct {
# Votien int;
# }

# func (v TIEN) getInt () {
# v.getInt ();
# v.putInt ();
# }
#         """
#         input = Program([StructType("TIEN", [("Votien", IntType())], []), MethodDecl("v", Id("TIEN"), FuncDecl(
#             "getInt", [], VoidType(), Block([MethCall(Id("v"), "getInt", []), MethCall(Id("v"), "putInt", [])])))])
#         self.assertTrue(TestChecker.test(
#             input, "Undeclared Method: putInt\n", inspect.stack()[0].function))

#     def test_017(self):
#         """
# type TIEN struct {Votien int;}
# type TIEN struct {v int;}
#         """
#         input = Program([StructType("TIEN", [("Votien", IntType())], []), StructType(
#             "TIEN", [("v", IntType())], [])])

#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Type: TIEN\n", inspect.stack()[0].function))

#     def test_018(self):
#         """
# var a = foo();
# func foo () int {
#     var a =  koo();
#     var c = getInt();
#     putInt(c);
#     putIntLn(c);
#     return 1;
# }
# var d = foo();
# func koo () int {
#     var a =  foo ();
#     return 1;
# }
#         """
#         input = Program([VarDecl("a", None, FuncCall("foo", [])), 
#                          FuncDecl("foo", [], IntType(), Block([VarDecl("a", None, FuncCall("koo", [])), 
#                                                                VarDecl("c", None, FuncCall("getInt", [])), 
#                                                                FuncCall("putInt", [Id("c")]), 
#                                                                FuncCall("putIntLn", [Id("c")]), 
#                                                                Return(IntLiteral(1))])), 
#                          VarDecl("d", None, FuncCall("foo", [])),
#                          FuncDecl("koo", [], IntType(), Block([VarDecl("a", None, FuncCall("foo", [])), Return(IntLiteral(1))]))
#                          ])

#         self.assertTrue(TestChecker.test(
#             input, "", inspect.stack()[0].function))
        
# #     def test_019(self):
# #         """
# # var v TIEN;
# # const b = v.foo();        
# # type TIEN struct {
# #     a int;
# # } 
# # func (v TIEN) foo() int {return 1;}
# # func (v TIEN) koo() int {return 1;}
# # const c = v.koo();  
# # const d = v.zoo();
# #         """
# #         input = Program([VarDecl("v",Id("TIEN"), None),ConstDecl("b",None,MethCall(Id("v"),"foo",[])),StructType("TIEN",[("a",IntType())],[]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),MethodDecl("v",Id("TIEN"),FuncDecl("koo",[],IntType(),Block([Return(IntLiteral(1))]))),ConstDecl("c",None,MethCall(Id("v"),"koo",[])),ConstDecl("d",None,MethCall(Id("v"),"zoo",[]))])

# #         self.assertTrue(TestChecker.test(
# #             input, "Undeclared Method: zoo\n", inspect.stack()[0].function))
    
# #     def test_020(self):
# #         """
# # var v TIEN;      
# # type TIEN struct {
# #     a int;
# # } 
# # type VO interface {
# #     foo() int;
# # }

# # func (v TIEN) foo() int {return 1;}
# # func (b TIEN) koo() {b.koo();}
# # func foo() {
# #     var x VO;  
# #     const b = x.foo(); 
# #     x.koo(); 
# # }
# #         """
# #         input = Program([VarDecl("v",Id("TIEN"), None),StructType("TIEN",[("a",IntType())],[]),InterfaceType("VO",[Prototype("foo",[],IntType())]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),MethodDecl("b",Id("TIEN"),FuncDecl("koo",[],VoidType(),Block([MethCall(Id("b"),"koo",[])]))),FuncDecl("foo",[],VoidType(),Block([VarDecl("x",Id("VO"), None),ConstDecl("b",None,MethCall(Id("x"),"foo",[])),MethCall(Id("x"),"koo",[])]))])
        
# #         self.assertTrue(TestChecker.test(
# #             input, "Undeclared Method: koo\n", inspect.stack()[0].function))
    
# #     def test_021(self):
# #         """
# # func foo() int {return 1;}
# # func  votien() int {
# #     return votien();
# #     foo();
# # }
# #         """
# #         input = Program([FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))])),FuncDecl("votien",[],IntType(),Block([Return(FuncCall("votien",[])),FuncCall("foo",[])]))])


# #         self.assertTrue(TestChecker.test(
# #             input, "", inspect.stack()[0].function))
    
# #     def test_022(self):
# #         """
# # type TIEN struct {v int;}
# # var v TIEN;
# # func foo(){
# #     for 1 {
# #         var a int = 1.2;
# #     }
# # }
# #         """
# #         input = Program([StructType("TIEN",[("v",IntType())],[]),VarDecl("v",Id("TIEN"), None),FuncDecl("foo",[],VoidType(),Block([ForBasic(IntLiteral(1),Block([VarDecl("a",IntType(),FloatLiteral(1.2))]))]))])

# #         self.assertTrue(TestChecker.test(
# #             input, "", inspect.stack()[0].function))
    
# #     def test_023(self):
# #         """
# # func foo(){
# # var v int;
# # const x = v;
# # var k float = x;
# # var y boolean = x;
# # }
# #         """
# #         input = Program([FuncDecl("foo",[],VoidType(),Block([VarDecl("v",IntType(), None),ConstDecl("x",None,Id("v")),VarDecl("k",FloatType(),Id("x")),VarDecl("y",BoolType(),Id("x"))]))])

# #         self.assertTrue(TestChecker.test(
# #             input, "Redeclared Type: TIEN", inspect.stack()[0].function))
    
# #     def test_019(self):
# #         """

# # var a [2][3] int;
# # var b = a[1];
# # var c [2] int = b;
# # var d [1] string = b;
        
# #         """
# #         input = Program([VarDecl("a",ArrayType([IntLiteral(2),IntLiteral(3)],IntType()), None),VarDecl("b", None,ArrayCell(Id("a"),[IntLiteral(1)])),VarDecl("c",ArrayType([IntLiteral(2)],IntType()),Id("b")),VarDecl("d",ArrayType([IntLiteral(1)],StringType()),Id("b"))])

# #         self.assertTrue(TestChecker.test(
# #             input, "Redeclared Type: TIEN", inspect.stack()[0].function))
    
# #     def test_019(self):
# #         """

# # var a int = 1 % 2;
# # var b int = 1 % 2.0;
        
# #         """
# #         input = Program([VarDecl("a",IntType(),BinaryOp("%", IntLiteral(1), IntLiteral(2))),VarDecl("b",IntType(),BinaryOp("%", IntLiteral(1), FloatLiteral(2.0)))])

# #         self.assertTrue(TestChecker.test(
# #             input, "Redeclared Type: TIEN", inspect.stack()[0].function))
#     def test_021(self):
#         input =  """
#     type A interface {foo();}
#     const A = 2;
#         """
#         input = Program([InterfaceType("A",[Prototype("foo",[],VoidType())]),ConstDecl("A",None,IntLiteral(2))])
#         self.assertTrue(TestChecker.test(input, """Redeclared Constant: A\n""", inspect.stack()[0].function)) 
    
#     def test_022(self):
#         input =  """
        
# func foo(a [2] float) {
#     foo([2] float {1.0,2.0})
#     foo([2] int {1,2})
# }
#         """
#         input = Program([FuncDecl("foo",[ParamDecl("a",ArrayType([IntLiteral(2)],FloatType()))],VoidType(),Block([FuncCall("foo",[ArrayLiteral([IntLiteral(2)],FloatType(),[FloatLiteral(1.0),FloatLiteral(2.0)])]),FuncCall("foo",[ArrayLiteral([IntLiteral(2)],IntType(),[IntLiteral(1),IntLiteral(2)])])]))])
#         self.assertTrue(TestChecker.test(input, """Type Mismatch: FuncCall(foo,[ArrayLiteral([IntLiteral(2)],IntType,[IntLiteral(1),IntLiteral(2)])])\n""", inspect.stack()[0].function)) 
    
# #     def test_023(self):
# #         input =  """
# # const v = 3;
# # const a = v + v;
# # var b [a * 2 + a] int;
# # var c [18] int = b;
# #         """
# #         input = Program([ConstDecl("v",None,IntLiteral(3)),ConstDecl("a",None,BinaryOp("+", Id("v"), Id("v"))),VarDecl("b",ArrayType([BinaryOp("+", BinaryOp("*", Id("a"), IntLiteral(2)), Id("a"))],IntType()), None),VarDecl("c",ArrayType([IntLiteral(18)],IntType()),Id("b"))])
# #         self.assertTrue(TestChecker.test(input, """VOTIEN""", inspect.stack()[0].function)) 
        
#     def test_024(self):
#             """
#     var v int = 1.02;

#             """
#             input = Program([VarDecl("v",IntType(),FloatLiteral(1.02))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: VarDecl(v,IntType,FloatLiteral(1.02))\n""", inspect.stack()[0].function))
    
#     def test_025(self):
#             """
# var v float = 1;
#             """
#             input = Program([VarDecl("v",FloatType(),IntLiteral(1))])


#             self.assertTrue(TestChecker.test(
#                 input, "", inspect.stack()[0].function))
        
    
#     def test_026(self):
#         """
# var v string = true;
#         """
#         input = Program([VarDecl("v",StringType(),BooleanLiteral("true"))])
        
#         self.assertTrue(TestChecker.test(
#             input, """Type Mismatch: VarDecl(v,StringType,BooleanLiteral(true))\n""", inspect.stack()[0].function))
        
#     def test_027(self):
#         """
# var v string = "1";
# const x = v;
# var k string = x;
# var y boolean = x;
#         """
#         input = Program([VarDecl("v",StringType(),StringLiteral("1")),ConstDecl("x",None,Id("v")),VarDecl("k",StringType(),Id("x")),VarDecl("y",BoolType(),Id("x"))])

#         self.assertTrue(TestChecker.test(
#             input, """Type Mismatch: VarDecl(y,BoolType,Id(x))\n""", inspect.stack()[0].function))
    
#     def test_028(self):
#         """
# type S1 struct {voTien int;}
# type S2 struct {voTien int;}
# type I1 interface {votien();}
# type I2 interface {votien();}

# func (s S1) votien() {return;}

# var a S1;
# var b S2;
# var c I1 = a;
# var d I2 = b;
#         """
#         input = Program([StructType("S1",[("voTien",IntType())],[]),StructType("S2",[("voTien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],VoidType())]),InterfaceType("I2",[Prototype("votien",[],VoidType())]),MethodDecl("s",Id("S1"),FuncDecl("votien",[],VoidType(),Block([Return(None)]))),VarDecl("a",Id("S1"), None),VarDecl("b",Id("S2"), None),VarDecl("c",Id("I1"),Id("a")),VarDecl("d",Id("I2"),Id("b"))])

#         self.assertTrue(TestChecker.test(
#             input, """Type Mismatch: VarDecl(d,Id(I2),Id(b))\n""", inspect.stack()[0].function))
        
#     def test_029(self):
#         """

# const a = 2;
# func foo () {
#     const a = 1;
#     for a < 1 {
#         const a = 1;
#         for a < 1 {
#             const a = 1;
#             const b = 1;
#         }
#         const b = 1;
#         var a = 1;
#     }
# }
    
#         """
#         input = Program([ConstDecl("a",None,IntLiteral(2)),FuncDecl("foo",[],VoidType(),Block([ConstDecl("a",None,IntLiteral(1)),ForBasic(BinaryOp("<", Id("a"), IntLiteral(1)),Block([ConstDecl("a",None,IntLiteral(1)),ForBasic(BinaryOp("<", Id("a"), IntLiteral(1)),Block([ConstDecl("a",None,IntLiteral(1)),ConstDecl("b",None,IntLiteral(1))])),ConstDecl("b",None,IntLiteral(1)),VarDecl("a", None,IntLiteral(1))]))]))])


#         self.assertTrue(TestChecker.test(
#             input, """Redeclared Variable: a\n""", inspect.stack()[0].function))
        
#     def test_030(self):
#             """
            
# type S1 struct {voTien int;}
# type S2 struct {voTien int;}
# type I1 interface {votien() S1;}
# type I2 interface {votien() S2;}

# func (s S1) votien() S1 {return s;}

# var a S1;
# var c I1 = a;
# var d I2 = a;
        
#             """
#             input = Program([StructType("S1",[("voTien",IntType())],[]),StructType("S2",[("voTien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],Id("S1"))]),InterfaceType("I2",[Prototype("votien",[],Id("S2"))]),MethodDecl("s",Id("S1"),FuncDecl("votien",[],Id("S1"),Block([Return(Id("s"))]))),VarDecl("a",Id("S1"), None),VarDecl("c",Id("I1"),Id("a")),VarDecl("d",Id("I2"),Id("a"))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: VarDecl(d,Id(I2),Id(a))\n""", inspect.stack()[0].function))
        
        
#     def test_031(self):
#             """
# type S1 struct {votien int;}
# type S2 struct {votien int;}
# type I1 interface {votien(e, e int) S1;}
# type I2 interface {votien(a int) S1;}

# func (s S1) voTien (a, b int) S1 {return s;}

# var a S1;   
# var c I1 = a;
# var d I2 = a;
#             """
#             input = Program([StructType("S1",[("votien",IntType())],[]),StructType("S2",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("voTien",[IntType(),IntType()],Id("S1"))]),InterfaceType("I2",[Prototype("voTien",[IntType()],Id("S1"))]),MethodDecl("s",Id("S1"),FuncDecl("voTien",[ParamDecl("a",IntType()),ParamDecl("b",IntType())],Id("S1"),Block([Return(Id("s"))]))),VarDecl("a",Id("S1"), None),VarDecl("c",Id("I1"),Id("a")),VarDecl("d",Id("I2"),Id("a"))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: VarDecl(d,Id(I2),Id(a))\n""", inspect.stack()[0].function))
        
#     def test_032(self):
#         """
  
# func foo(){
#     return
# }
# func foo1() int{
#     return 1
# }
# func foo2() float{
#     return 2
# }
#         """
#         input = Program([FuncDecl("foo",[],VoidType(),Block([Return(None)])),FuncDecl("foo1",[],IntType(),Block([Return(IntLiteral(1))])),FuncDecl("foo2",[],FloatType(),Block([Return(IntLiteral(2))]))])

#         self.assertTrue(TestChecker.test(
#             input, "Type Mismatch: Return(IntLiteral(2))\n", inspect.stack()[0].function))
        
        
        
#     def test_033(self):
#         """
#         """
#         input = """
# var a = [2] int {1, 3}
# var c [2] float = a
#         """

#         self.assertTrue(TestChecker.test(
#             input, "", inspect.stack()[0].function))
        
# #     def test_034(self):
# #         """

# # type S1 struct {votien int;}
# # type I1 interface {votien();}
# # var a I1;
# # var c I1 = nil;
# # var d S1 = nil;
# # func foo(){
# #     c := a;
# #     a := nil;
# # }

# # var e int = nil;
# #         """
# #         input = Program([StructType("S1",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],VoidType())]),VarDecl("a",Id("I1"), None),VarDecl("c",Id("I1"),NilLiteral()),VarDecl("d",Id("S1"),NilLiteral()),FuncDecl("foo",[],VoidType(),Block([Assign(Id("c"),Id("a")),Assign(Id("a"),NilLiteral())])),VarDecl("e",IntType(),NilLiteral())])

# #         self.assertTrue(TestChecker.test(
# #             input, """Type Mismatch: VarDecl("e",IntType(),NilLiteral())\n""", inspect.stack()[0].function))
        
        
#     def test_035(self):
#             """

# var a = 1 + 2.0;
# var b = 1 + 1;
# func foo() int {
#     return b;
#     return a;
# }
     
#             """
#             input = Program([VarDecl("a", None,BinaryOp("+", IntLiteral(1), FloatLiteral(2.0))),VarDecl("b", None,BinaryOp("+", IntLiteral(1), IntLiteral(1))),FuncDecl("foo",[],IntType(),Block([Return(Id("b")),Return(Id("a"))]))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: Return(Id(a))\n""", inspect.stack()[0].function))
        
        
#     def test_036(self):
#             """
# var a boolean = 1 > 2;
# var b boolean = 1.0 < 2.0;
# var c boolean = "1" == "2";
# var d boolean = 1 > 2.0;
#             """
#             input = Program([VarDecl("a",BoolType(),BinaryOp(">", IntLiteral(1), IntLiteral(2))),VarDecl("b",BoolType(),BinaryOp("<", FloatLiteral(1.0), FloatLiteral(2.0))),VarDecl("c",BoolType(),BinaryOp("==", StringLiteral("""1"""), StringLiteral("""2"""))),VarDecl("d",BoolType(),BinaryOp(">", IntLiteral(1), FloatLiteral(2.0)))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: BinaryOp(IntLiteral(1),>,FloatLiteral(2.0))\n""", inspect.stack()[0].function))
        
        
# #     def test_036(self):
# #             """

# # func foo(){
# #     for var i int = 1; i < 10; i := 1.0 {
# #         return;
# #     }
# # }
        
# #             """
# #             input = Program([FuncDecl("foo",[],VoidType(),Block([ForStep(VarDecl("i",IntType(),IntLiteral(1)),BinaryOp("<", Id("i"), IntLiteral(10)),Assign(Id("i"),FloatLiteral(1.0)),Block([Return(None)]))]))])

# #             self.assertTrue(TestChecker.test(
# #                 input, """Type Mismatch: Assign(Id(i),FloatLiteral(1.0))\n""", inspect.stack()[0].function))
                            
#     def test_037(self):
#             """

# const a = 2;
# func foo () {
#     const a = 1;
#     for var a = 1; a < 1; b := 2 {
#         const b = 1;
#     }
# }
        
#             """
#             input = Program([ConstDecl("a",None,IntLiteral(2)),FuncDecl("foo",[],VoidType(),Block([ConstDecl("a",None,IntLiteral(1)),ForStep(VarDecl("a", None,IntLiteral(1)),BinaryOp("<", Id("a"), IntLiteral(1)),Assign(Id("b"),IntLiteral(2)),Block([ConstDecl("b",None,IntLiteral(1))]))]))])

#             self.assertTrue(TestChecker.test(
#                 input, "Undeclared Identifier: b\n", inspect.stack()[0].function))
        
        
#     def test_038(self):
#         """
# func foo(){
#     var arr [2][3] int;
#     for a, b := range arr {
#         var c int = a;
#         var d [3]int = b;
#         var e [2]string = a;
#     }
# }
#         """
#         input = Program([FuncDecl("foo",[],VoidType(),Block([VarDecl("arr",ArrayType([IntLiteral(2),IntLiteral(3)],IntType()), None),ForEach(Id("a"),Id("b"),Id("arr"),Block([VarDecl("c",IntType(),Id("a")),VarDecl("d",ArrayType([IntLiteral(3)],IntType()),Id("b")),VarDecl("e",ArrayType([IntLiteral(2)],StringType()),Id("a"))]))]))])

#         self.assertTrue(TestChecker.test(
#             input, """Type Mismatch: VarDecl(e,ArrayType(StringType,[IntLiteral(2)]),Id(a))\n""", inspect.stack()[0].function))
    
#     def test_062(self):
#         input = """
# func (v Hoang) foo() float {
#     var x float = "asdasd";
#     return x;
# }
# type Hoang struct {
#     foo int;
# }"""
#         self.assertTrue(TestChecker.test(input, "Redeclared Method: foo\n", inspect.stack()[0].function))
    
    def test_001(self):
        """
var VoTien = 1; 
var VoTien = 2;
        """
        input = Program([VarDecl("VoTien", None, IntLiteral(1)),
                        VarDecl("VoTien", None, IntLiteral(2))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Variable: VoTien\n", inspect.stack()[0].function))

    def test_002(self):
        """
var VoTien = 1; 
const VoTien = 2;
        """
        input = Program([VarDecl("VoTien", None, IntLiteral(1)),
                        ConstDecl("VoTien", None, IntLiteral(2))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Constant: VoTien\n", inspect.stack()[0].function))

    def test_003(self):
        """
const VoTien = 1; 
var VoTien = 2;
        """
        input = Program([ConstDecl("VoTien", None, IntLiteral(1)),
                        VarDecl("VoTien", None, IntLiteral(2))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Variable: VoTien\n", inspect.stack()[0].function))

    def test_004(self):
        """
const VoTien = 1; 
func VoTien () {return;}
        """
        input = Program([ConstDecl("VoTien", None, IntLiteral(1)), FuncDecl(
            "VoTien", [], VoidType(), Block([Return(None)]))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Function: VoTien\n", inspect.stack()[0].function))

    def test_005(self):
        """ 
func VoTien () {return;}
var VoTien = 1;
        """
        input = Program([FuncDecl("VoTien", [], VoidType(), Block(
            [Return(None)])), VarDecl("VoTien", None, IntLiteral(1))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Variable: VoTien\n", inspect.stack()[0].function))

    def test_006(self):
        """ 
var getInt = 1;
        """
        input = Program([VarDecl("getInt", None, IntLiteral(1))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Variable: getInt\n", inspect.stack()[0].function))

    def test_007(self):
        """ 
type  Votien struct {
Votien int;
}
type TIEN struct {
Votien string;
TIEN int;
TIEN float;
}
        """
        input = Program([StructType("Votien", [("Votien", IntType())], []), StructType(
            "TIEN", [("Votien", StringType()), ("TIEN", IntType()), ("TIEN", FloatType())], [])])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Field: TIEN\n", inspect.stack()[0].function))

    def test_008(self):
        """ 
func (v TIEN) putIntLn () {return;}
func (v TIEN) getInt () {return;}
func (v TIEN) getInt () {return;}
type TIEN struct {
Votien int;
}
        """
        input = Program([MethodDecl("v", Id("TIEN"), FuncDecl("putIntLn", [], VoidType(), Block([Return(None)]))), MethodDecl("v", Id("TIEN"), FuncDecl("getInt", [], VoidType(
        ), Block([Return(None)]))), MethodDecl("v", Id("TIEN"), FuncDecl("getInt", [], VoidType(), Block([Return(None)]))), StructType("TIEN", [("Votien", IntType())], [])])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Method: getInt\n", inspect.stack()[0].function))

    def test_009(self):
        """ 
type VoTien interface {
VoTien ();
VoTien (a int);
}
        """
        input = Program([InterfaceType("VoTien", [Prototype(
            "VoTien", [], VoidType()), Prototype("VoTien", [IntType()], VoidType())])])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Prototype: VoTien\n", inspect.stack()[0].function))

    def test_010(self):
        """ 
func Votien (a, a int) {return;}
        """
        input = Program([FuncDecl("Votien", [ParamDecl("a", IntType()), ParamDecl(
            "a", IntType())], VoidType(), Block([Return(None)]))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Parameter: a\n", inspect.stack()[0].function))

    def test_011(self):
        """ 
func Votien (b int) {
var b = 1;
var a = 1;
const a = 1;
}
        """
        input = Program([FuncDecl("Votien", [ParamDecl("b", IntType())], VoidType(), Block([VarDecl(
            "b", None, IntLiteral(1)), VarDecl("a", None, IntLiteral(1)), ConstDecl("a", None, IntLiteral(1))]))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Constant: a\n", inspect.stack()[0].function))

    def test_012(self):
        """ 
func Votien (b int) {
    for var a = 1; a < 1; a += 1 {
        const a = 2;
    }
}
        """
        input = Program([FuncDecl("Votien", [ParamDecl("b", IntType())], VoidType(), Block([ForStep(VarDecl("a", None, IntLiteral(1)), BinaryOp(
            "<", Id("a"), IntLiteral(1)), Assign(Id("a"), BinaryOp("+", Id("a"), IntLiteral(1))), Block([ConstDecl("a", None, IntLiteral(2))]))]))])
        self.assertTrue(TestChecker.test(
            input, "Redeclared Constant: a\n", inspect.stack()[0].function))

    def test_013(self):
        """ 
var a = 1;
var b = a;
var c = d;
        """
        input = Program([VarDecl("a", None, IntLiteral(1)), VarDecl(
            "b", None, Id("a")), VarDecl("c", None, Id("d"))])
        self.assertTrue(TestChecker.test(
            input, "Undeclared Identifier: d\n", inspect.stack()[0].function))

    def test_014(self):
        """ 
func Votien () int {return 1;}

fun foo () {
var b = Votien();
foo_votine();
return;
}
        """
        input = Program([FuncDecl("Votien", [], IntType(), Block([Return(IntLiteral(1))])), FuncDecl(
            "foo", [], VoidType(), Block([VarDecl("b", None, FuncCall("Votien", [])), FuncCall("foo_votine", []), Return(None)]))])
        self.assertTrue(TestChecker.test(
            input, "Undeclared Function: foo_votine\n", inspect.stack()[0].function))

    def test_015(self):
        """ 
 
type TIEN struct {
    Votien int;
}

func (v TIEN) getInt () {
    const c = v.Votien;
    var d = v.tien;
}
        
        """
        input = Program([StructType("TIEN",[("Votien",IntType())],[]),MethodDecl("v",Id("TIEN"),FuncDecl("getInt",[],VoidType(),Block([ConstDecl("c",None,FieldAccess(Id("v"),"Votien")),VarDecl("d", None,FieldAccess(Id("v"),"tien"))])))])
        self.assertTrue(TestChecker.test(
            input, "Undeclared Field: tien\n", inspect.stack()[0].function))

    def test_016(self):
        """ 
type TIEN struct {
Votien int;
}

func (v TIEN) getInt () {
v.getInt ();
v.putInt ();
}
        """
        input = Program([StructType("TIEN", [("Votien", IntType())], []), MethodDecl("v", Id("TIEN"), FuncDecl(
            "getInt", [], VoidType(), Block([MethCall(Id("v"), "getInt", []), MethCall(Id("v"), "putInt", [])])))])
        self.assertTrue(TestChecker.test(
            input, "Undeclared Method: putInt\n", inspect.stack()[0].function))

    def test_017(self):
        """
type TIEN struct {Votien int;}
type TIEN struct {v int;}
        """
        input = Program([StructType("TIEN", [("Votien", IntType())], []), StructType(
            "TIEN", [("v", IntType())], [])])

        self.assertTrue(TestChecker.test(
            input, "Redeclared Type: TIEN\n", inspect.stack()[0].function))

    def test_018(self):
        """
var a = foo();
func foo () int {
    var a =  koo();
    var c = getInt();
    putInt(c);
    putIntLn(c);
    return 1;
}
var d = foo();
func koo () int {
    var a =  foo ();
    return 1;
}
        """
        input = Program([VarDecl("a", None, FuncCall("foo", [])), 
                         FuncDecl("foo", [], IntType(), Block([VarDecl("a", None, FuncCall("koo", [])), 
                                                               VarDecl("c", None, FuncCall("getInt", [])), 
                                                               FuncCall("putInt", [Id("c")]), 
                                                               FuncCall("putIntLn", [Id("c")]), 
                                                               Return(IntLiteral(1))])), 
                         VarDecl("d", None, FuncCall("foo", [])),
                         FuncDecl("koo", [], IntType(), Block([VarDecl("a", None, FuncCall("foo", [])), Return(IntLiteral(1))]))
                         ])

        self.assertTrue(TestChecker.test(
            input, "", inspect.stack()[0].function))
        
    def test_019(self):
        """
var v TIEN;
const b = v.foo();        
type TIEN struct {
    a int;
} 
func (v TIEN) foo() int {return 1;}
func (v TIEN) koo() int {return 1;}
const c = v.koo();  
const d = v.zoo();
        """
        input = Program([VarDecl("v",Id("TIEN"), None),ConstDecl("b",None,MethCall(Id("v"),"foo",[])),StructType("TIEN",[("a",IntType())],[]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),MethodDecl("v",Id("TIEN"),FuncDecl("koo",[],IntType(),Block([Return(IntLiteral(1))]))),ConstDecl("c",None,MethCall(Id("v"),"koo",[])),ConstDecl("d",None,MethCall(Id("v"),"zoo",[]))])

        self.assertTrue(TestChecker.test(
            input, "Undeclared Method: zoo\n", inspect.stack()[0].function))
    
    def test_020(self):
        """
var v TIEN;      
type TIEN struct {
    a int;
} 
type VO interface {
    foo() int;
}

func (v TIEN) foo() int {return 1;}
func (b TIEN) koo() {b.koo();}
func foo() {
    var x VO;  
    const b = x.foo(); 
    x.koo(); 
}
        """
        input = Program([VarDecl("v",Id("TIEN"), None),StructType("TIEN",[("a",IntType())],[]),InterfaceType("VO",[Prototype("foo",[],IntType())]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),MethodDecl("b",Id("TIEN"),FuncDecl("koo",[],VoidType(),Block([MethCall(Id("b"),"koo",[])]))),FuncDecl("foo",[],VoidType(),Block([VarDecl("x",Id("VO"), None),ConstDecl("b",None,MethCall(Id("x"),"foo",[])),MethCall(Id("x"),"koo",[])]))])
        
        self.assertTrue(TestChecker.test(
            input, "Undeclared Method: koo\n", inspect.stack()[0].function))
    
#     def test_021(self):
#         """
# func foo() int {return 1;}
# func  votien() int {
#     return votien();
#     foo();
# }
#         """
#         input = Program([FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))])),FuncDecl("votien",[],IntType(),Block([Return(FuncCall("votien",[])),FuncCall("foo",[])]))])


#         self.assertTrue(TestChecker.test(
#             input, "", inspect.stack()[0].function))
    
#     def test_022(self):
#         """
# type TIEN struct {v int;}
# var v TIEN;
# func foo(){
#     for 1 {
#         var a int = 1.2;
#     }
# }
#         """
#         input = Program([StructType("TIEN",[("v",IntType())],[]),VarDecl("v",Id("TIEN"), None),FuncDecl("foo",[],VoidType(),Block([ForBasic(IntLiteral(1),Block([VarDecl("a",IntType(),FloatLiteral(1.2))]))]))])

#         self.assertTrue(TestChecker.test(
#             input, "", inspect.stack()[0].function))
    
#     def test_023(self):
#         """
# func foo(){
# var v int;
# const x = v;
# var k float = x;
# var y boolean = x;
# }
#         """
#         input = Program([FuncDecl("foo",[],VoidType(),Block([VarDecl("v",IntType(), None),ConstDecl("x",None,Id("v")),VarDecl("k",FloatType(),Id("x")),VarDecl("y",BoolType(),Id("x"))]))])

#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Type: TIEN", inspect.stack()[0].function))
    
#     def test_019(self):
#         """

# var a [2][3] int;
# var b = a[1];
# var c [2] int = b;
# var d [1] string = b;
        
#         """
#         input = Program([VarDecl("a",ArrayType([IntLiteral(2),IntLiteral(3)],IntType()), None),VarDecl("b", None,ArrayCell(Id("a"),[IntLiteral(1)])),VarDecl("c",ArrayType([IntLiteral(2)],IntType()),Id("b")),VarDecl("d",ArrayType([IntLiteral(1)],StringType()),Id("b"))])

#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Type: TIEN", inspect.stack()[0].function))
    
#     def test_019(self):
#         """

# var a int = 1 % 2;
# var b int = 1 % 2.0;
        
#         """
#         input = Program([VarDecl("a",IntType(),BinaryOp("%", IntLiteral(1), IntLiteral(2))),VarDecl("b",IntType(),BinaryOp("%", IntLiteral(1), FloatLiteral(2.0)))])

#         self.assertTrue(TestChecker.test(
#             input, "Redeclared Type: TIEN", inspect.stack()[0].function))
    def test_021(self):
        input =  """
    type A interface {foo();}
    const A = 2;
        """
        input = Program([InterfaceType("A",[Prototype("foo",[],VoidType())]),ConstDecl("A",None,IntLiteral(2))])
        self.assertTrue(TestChecker.test(input, """Redeclared Constant: A\n""", inspect.stack()[0].function)) 
    
    def test_022(self):
        input =  """
        
func foo(a [2] float) {
    foo([2] float {1.0,2.0})
    foo([2] int {1,2})
}
        """
        input = Program([FuncDecl("foo",[ParamDecl("a",ArrayType([IntLiteral(2)],FloatType()))],VoidType(),Block([FuncCall("foo",[ArrayLiteral([IntLiteral(2)],FloatType(),[FloatLiteral(1.0),FloatLiteral(2.0)])]),FuncCall("foo",[ArrayLiteral([IntLiteral(2)],IntType(),[IntLiteral(1),IntLiteral(2)])])]))])
        self.assertTrue(TestChecker.test(input, """Type Mismatch: FuncCall(foo,[ArrayLiteral([IntLiteral(2)],IntType,[IntLiteral(1),IntLiteral(2)])])\n""", inspect.stack()[0].function)) 
    
    def test_023(self):
        input =  """
const v = 3;
const a = v + v;
var b [a * 2 + a] int;
var c [18] int = b;
        """
        input = Program([ConstDecl("v",None,IntLiteral(3)),ConstDecl("a",None,BinaryOp("+", Id("v"), Id("v"))),VarDecl("b",ArrayType([BinaryOp("+", BinaryOp("*", Id("a"), IntLiteral(2)), Id("a"))],IntType()), None),VarDecl("c",ArrayType([IntLiteral(18)],IntType()),Id("b"))])
        self.assertTrue(TestChecker.test(input, """""", inspect.stack()[0].function)) 
        
    def test_024(self):
            """
    var v int = 1.02;

            """
            input = Program([VarDecl("v",IntType(),FloatLiteral(1.02))])

            self.assertTrue(TestChecker.test(
                input, """Type Mismatch: VarDecl(v,IntType,FloatLiteral(1.02))\n""", inspect.stack()[0].function))
    
    def test_025(self):
            """
var v float = 1;
            """
            input = Program([VarDecl("v",FloatType(),IntLiteral(1))])


            self.assertTrue(TestChecker.test(
                input, "", inspect.stack()[0].function))
        
    
    def test_026(self):
        """
var v string = true;
        """
        input = Program([VarDecl("v",StringType(),BooleanLiteral("true"))])
        
        self.assertTrue(TestChecker.test(
            input, """Type Mismatch: VarDecl(v,StringType,BooleanLiteral(true))\n""", inspect.stack()[0].function))
        
    def test_027(self):
        """
var v string = "1";
const x = v;
var k string = x;
var y boolean = x;
        """
        input = Program([VarDecl("v",StringType(),StringLiteral("1")),ConstDecl("x",None,Id("v")),VarDecl("k",StringType(),Id("x")),VarDecl("y",BoolType(),Id("x"))])

        self.assertTrue(TestChecker.test(
            input, """Type Mismatch: VarDecl(y,BoolType,Id(x))\n""", inspect.stack()[0].function))
    
    def test_028(self):
        """
type S1 struct {votien int;}
type S2 struct {votien int;}
type I1 interface {votien();}
type I2 interface {votien();}

func (s S1) votien() {return;}

var a S1;
var b S2;
var c I1 = a;
var d I2 = b;
        """
        input = Program([StructType("S1",[("votien",IntType())],[]),StructType("S2",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],VoidType())]),InterfaceType("I2",[Prototype("votien",[],VoidType())]),MethodDecl("s",Id("S1"),FuncDecl("votien",[],VoidType(),Block([Return(None)]))),VarDecl("a",Id("S1"), None),VarDecl("b",Id("S2"), None),VarDecl("c",Id("I1"),Id("a")),VarDecl("d",Id("I2"),Id("b"))])

        self.assertTrue(TestChecker.test(
            input, """Redeclared Method: votien\n""", inspect.stack()[0].function))
        
    def test_029(self):
        """

const a = 2;
func foo () {
    const a = 1;
    for a < 1 {
        const a = 1;
        for a < 1 {
            const a = 1;
            const b = 1;
        }
        const b = 1;
        var a = 1;
    }
}
    
        """
        input = Program([ConstDecl("a",None,IntLiteral(2)),FuncDecl("foo",[],VoidType(),Block([ConstDecl("a",None,IntLiteral(1)),ForBasic(BinaryOp("<", Id("a"), IntLiteral(1)),Block([ConstDecl("a",None,IntLiteral(1)),ForBasic(BinaryOp("<", Id("a"), IntLiteral(1)),Block([ConstDecl("a",None,IntLiteral(1)),ConstDecl("b",None,IntLiteral(1))])),ConstDecl("b",None,IntLiteral(1)),VarDecl("a", None,IntLiteral(1))]))]))])


        self.assertTrue(TestChecker.test(
            input, """Redeclared Variable: a\n""", inspect.stack()[0].function))
        
    def test_030(self):
            """
            
type S1 struct {votien int;}
type S2 struct {votien int;}
type I1 interface {votien() S1;}
type I2 interface {votien() S2;}

func (s S1) votien() S1 {return s;}

var a S1;
var c I1 = a;
var d I2 = a;
        
            """
            input = Program([StructType("S1",[("votien",IntType())],[]),StructType("S2",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],Id("S1"))]),InterfaceType("I2",[Prototype("votien",[],Id("S2"))]),MethodDecl("s",Id("S1"),FuncDecl("votien",[],Id("S1"),Block([Return(Id("s"))]))),VarDecl("a",Id("S1"), None),VarDecl("c",Id("I1"),Id("a")),VarDecl("d",Id("I2"),Id("a"))])

            self.assertTrue(TestChecker.test(
                input, """Redeclared Method: votien\n""", inspect.stack()[0].function))
        
        
    def test_031(self):
            """
type S1 struct {votien int;}
type S2 struct {votien int;}
type I1 interface {votien(e, e int) S1;}
type I2 interface {votien(a int) S1;}

func (s S1) votien(a, b int) S1 {return s;}

var a S1;
var c I1 = a;
var d I2 = a;
            """
            input = Program([StructType("S1",[("votien",IntType())],[]),StructType("S2",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[IntType(),IntType()],Id("S1"))]),InterfaceType("I2",[Prototype("votien",[IntType()],Id("S1"))]),MethodDecl("s",Id("S1"),FuncDecl("votien",[ParamDecl("a",IntType()),ParamDecl("b",IntType())],Id("S1"),Block([Return(Id("s"))]))),VarDecl("a",Id("S1"), None),VarDecl("c",Id("I1"),Id("a")),VarDecl("d",Id("I2"),Id("a"))])

            self.assertTrue(TestChecker.test(
                input, """Redeclared Method: votien\n""", inspect.stack()[0].function))
        
    def test_032(self):
        """
  
func foo(){
    return
}
func foo1() int{
    return 1
}
func foo2() float{
    return 2
}
        """
        input = Program([FuncDecl("foo",[],VoidType(),Block([Return(None)])),FuncDecl("foo1",[],IntType(),Block([Return(IntLiteral(1))])),FuncDecl("foo2",[],FloatType(),Block([Return(IntLiteral(2))]))])

        self.assertTrue(TestChecker.test(
            input, "Type Mismatch: Return(IntLiteral(2))\n", inspect.stack()[0].function))
        
        
        
    def test_033(self):
        """
var a = [2] int {1, 2}
var c [2] float = a
        """
        input = Program([VarDecl("a", None,ArrayLiteral([IntLiteral(2)],IntType(),[IntLiteral(1),IntLiteral(2)])),
                         VarDecl("c",ArrayType([IntLiteral(2)],FloatType()),Id("a"))])

        self.assertTrue(TestChecker.test(
            input, "", inspect.stack()[0].function))
        
        
        
#     def test_034(self):
#         """

# type S1 struct {votien int;}
# type I1 interface {votien();}
# var a I1;
# var c I1 = nil;
# var d S1 = nil;
# func foo(){
#     c := a;
#     a := nil;
# }

# var e int = nil;
#         """
#         input = Program([StructType("S1",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],VoidType())]),VarDecl("a",Id("I1"), None),VarDecl("c",Id("I1"),NilLiteral()),VarDecl("d",Id("S1"),NilLiteral()),FuncDecl("foo",[],VoidType(),Block([Assign(Id("c"),Id("a")),Assign(Id("a"),NilLiteral())])),VarDecl("e",IntType(),NilLiteral())])

#         self.assertTrue(TestChecker.test(
#             input, """Type Mismatch: VarDecl(e,IntType(),NilLiteral())\n""", inspect.stack()[0].function))
        
        
    def test_035(self):
            """

var a = 1 + 2.0;
var b = 1 + 1;
func foo() int {
    return b;
    return a;
}
     
            """
            input = Program([VarDecl("a", None,BinaryOp("+", IntLiteral(1), FloatLiteral(2.0))),VarDecl("b", None,BinaryOp("+", IntLiteral(1), IntLiteral(1))),FuncDecl("foo",[],IntType(),Block([Return(Id("b")),Return(Id("a"))]))])

            self.assertTrue(TestChecker.test(
                input, """Type Mismatch: Return(Id(a))\n""", inspect.stack()[0].function))
        
        
    def test_036(self):
            """
var a boolean = 1 > 2;
var b boolean = 1.0 < 2.0;
var c boolean = "1" == "2";
var d boolean = 1 > 2.0;
            """
            input = Program([VarDecl("a",BoolType(),BinaryOp(">", IntLiteral(1), IntLiteral(2))),VarDecl("b",BoolType(),BinaryOp("<", FloatLiteral(1.0), FloatLiteral(2.0))),VarDecl("c",BoolType(),BinaryOp("==", StringLiteral("""1"""), StringLiteral("""2"""))),VarDecl("d",BoolType(),BinaryOp(">", IntLiteral(1), FloatLiteral(2.0)))])

            self.assertTrue(TestChecker.test(
                input, """Type Mismatch: BinaryOp(IntLiteral(1),>,FloatLiteral(2.0))\n""", inspect.stack()[0].function))
        
        
#     def test_036(self):
#             """

# func foo(){
#     for var i int = 1; i < 10; i := 1.0 {
#         return;
#     }
# }
        
#             """
#             input = Program([FuncDecl("foo",[],VoidType(),Block([ForStep(VarDecl("i",IntType(),IntLiteral(1)),BinaryOp("<", Id("i"), IntLiteral(10)),Assign(Id("i"),FloatLiteral(1.0)),Block([Return(None)]))]))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: Assign(Id(i),FloatLiteral(1.0))\n""", inspect.stack()[0].function))
                            
#     def test_037(self):
#             """

# const a = 2;
# func foo () {
#     const a = 1;
#     for var a = 1; a < 1; b := 2 {
#         const b = 1;
#     }
# }
        
#             """
#             input = Program([ConstDecl("a",None,IntLiteral(2)),FuncDecl("foo",[],VoidType(),Block([ConstDecl("a",None,IntLiteral(1)),ForStep(VarDecl("a", None,IntLiteral(1)),BinaryOp("<", Id("a"), IntLiteral(1)),Assign(Id("b"),IntLiteral(2)),Block([ConstDecl("b",None,IntLiteral(1))]))]))])

#             self.assertTrue(TestChecker.test(
#                 input, "Redeclared Constant: b\n", inspect.stack()[0].function))
        
        
    def test_038(self):
        """
func foo(){
    var arr [2][3] int;
    var a int;
    var b [3]int;
    for a, b := range arr {
        var c int = a;
        var d [3]int = b;
        var e [2]string = a;
    }
}
        """
        input = """
func foo(){
    var arr [2][3] int;
    var a int;
    var b [3]int;
    for a, b := range arr {
        var c int = a;
        var d [3]int = b;
        var e [2]string = a;
    }
}
        """

        self.assertTrue(TestChecker.test(
            input, """Type Mismatch: VarDecl(e,ArrayType(StringType,[IntLiteral(2)]),Id(a))\n""", inspect.stack()[0].function))
        
        
    def test_039(self):
            """

type Person struct {
    name string ;
    age int ;
}

func  votien()  {
    var person = Person{name: "Alice", age: 30}
    person.name := "John";
    person.age := 30;
    putStringLn(person.name)
    putStringLn(person.Greet())
}

func (p Person) Greet() string {
return "Hello, " + p.name
}
    
            """
            input = Program([StructType("Person",[("name",StringType()),("age",IntType())],[]),FuncDecl("votien",[],VoidType(),Block([VarDecl("person", None,StructLiteral("Person",[("name",StringLiteral("Alice")),("age",IntLiteral(30))])),Assign(FieldAccess(Id("person"),"name"),StringLiteral("John")),Assign(FieldAccess(Id("person"),"age"),IntLiteral(30)),FuncCall("putStringLn",[FieldAccess(Id("person"),"name")]),FuncCall("putStringLn",[MethCall(Id("person"),"Greet",[])])])),MethodDecl("p",Id("Person"),FuncDecl("Greet",[],StringType(),Block([Return(BinaryOp("+", StringLiteral("Hello, "), FieldAccess(Id("p"),"name")))])))])

            self.assertTrue(TestChecker.test(
                input, "", inspect.stack()[0].function))
        
    def test_040(self):
            """
 
var v TIEN;
const b = v.foo();        
type TIEN struct {
    a int;
} 
func (v TIEN) foo() int {return 1;}
func (v TIEN) koo() int {return 1;}
const c = v.koo();  
const d = v.zoo();
        
            """
            input = Program([VarDecl("v",Id("TIEN"), None),ConstDecl("b",None,MethCall(Id("v"),"foo",[])),StructType("TIEN",[("a",IntType())],[]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),MethodDecl("v",Id("TIEN"),FuncDecl("koo",[],IntType(),Block([Return(IntLiteral(1))]))),ConstDecl("c",None,MethCall(Id("v"),"koo",[])),ConstDecl("d",None,MethCall(Id("v"),"zoo",[]))])

            self.assertTrue(TestChecker.test(
                input, "Undeclared Method: zoo\n", inspect.stack()[0].function))
        
    def test_041(self):
            """
  
type S1 struct {votien int;}
type S2 struct {votien int;}
type I1 interface {votien();}
type I2 interface {votien() int;}

func (s S1) votien() {return;}

var a S1;
var b S2;
var c I2 = a;
            """
            input = Program([StructType("S1",[("votien",IntType())],[]),StructType("S2",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],VoidType())]),InterfaceType("I2",[Prototype("votien",[],IntType())]),MethodDecl("s",Id("S1"),FuncDecl("votien",[],VoidType(),Block([Return(None)]))),VarDecl("a",Id("S1"), None),VarDecl("b",Id("S2"), None),VarDecl("c",Id("I2"),Id("a"))])

            self.assertTrue(TestChecker.test(
                input, """Redeclared Method: votien\n""", inspect.stack()[0].function))
        
    def test_042(self):
            """
func foo() {
    putFloat(getInt());
}
            """
            input = Program([FuncDecl("foo",[],VoidType(),Block([FuncCall("putFloat",[FuncCall("getInt",[])])]))])

            self.assertTrue(TestChecker.test(
                input, """Type Mismatch: FuncCall(putFloat,[FuncCall(getInt,[])])\n""", inspect.stack()[0].function))
        
#     def test_043(self):
#             """
# type TIEN struct {a [2]int;} 
# type VO interface {foo() int;}

# func (v TIEN) foo() int {return 1;}

# func foo(a VO) {
#     var b = TIEN{a: [2]int{1, 2}};
#     foo(b)
# }
#             """
#             input = Program([StructType("TIEN",[("a",ArrayType([IntLiteral(2)],IntType()))],[]),InterfaceType("VO",[Prototype("foo",[],IntType())]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),FuncDecl("foo",[ParamDecl("a",Id("VO"))],VoidType(),Block([VarDecl("b", None,StructLiteral("TIEN",[("a",ArrayLiteral([IntLiteral(2)],IntType(),[IntLiteral(1),IntLiteral(2)]))])),FuncCall("foo",[Id("b")])]))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: FuncCall(foo,[Id(b)])\n""", inspect.stack()[0].function))
        
    # def test_044(self):
#             """

# # type TIEN struct {a [2]int;} 
# # type VO interface {foo() int;}

# # func (v TIEN) foo() int {return 1;}

# # func foo(a VO) {
# #     var b = nil;
# #     foo(nil)
# # }
        
# #             """
#             input = Program([StructType("TIEN",[("a",ArrayType([IntLiteral(2)],IntType()))],[]),InterfaceType("VO",[Prototype("foo",[],IntType())]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[],IntType(),Block([Return(IntLiteral(1))]))),FuncDecl("foo",[ParamDecl("a",Id("VO"))],VoidType(),Block([VarDecl("b", None,NilLiteral()),FuncCall("foo",[NilLiteral()])]))])

#             self.assertTrue(TestChecker.test(
#                 input, "", inspect.stack()[0].function))
        
#     def test_045(self):
#             """

# type TIEN struct {a [2]int;} 

# func foo() TIEN {
#     return nil
# }
        
#             """
#             input = Program([StructType("TIEN",[("a",ArrayType([IntLiteral(2)],IntType()))],[]),FuncDecl("foo",[],Id("TIEN"),Block([Return(NilLiteral())]))])

#             self.assertTrue(TestChecker.test(
#                 input, "", inspect.stack()[0].function))
        
    def test_046(self):
        """
            type putLn struct {a int;};
        """
        input = Program([StructType("putLn",[("a",IntType())],[])])
        self.assertTrue(TestChecker.test(
            input, """Redeclared Type: putLn\n""", inspect.stack()[0].function))
        
    def test_047(self):
            """


type TIEN struct {
    Votien int;
}
func (v TIEN) foo (v int) {return;}
func foo () {return;}
        
        
            """
            input = Program([StructType("TIEN",[("Votien",IntType())],[]),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[ParamDecl("v",IntType())],VoidType(),Block([Return(None)]))),FuncDecl("foo",[],VoidType(),Block([Return(None)]))])

            self.assertTrue(TestChecker.test(
                input, "", inspect.stack()[0].function))
        
        
#     def test_048(self):
#             """

# const a = 2;
# func foo () {
#     const a = 1;
#     for var a = 1; a < 1; b := 2 {
#         const b = 1;
#     }
# }
        
#             """
#             input = Program([ConstDecl("a",None,IntLiteral(2)),FuncDecl("foo",[],VoidType(),Block([ConstDecl("a",None,IntLiteral(1)),ForStep(VarDecl("a", None,IntLiteral(1)),BinaryOp("<", Id("a"), IntLiteral(1)),Assign(Id("b"),IntLiteral(2)),Block([ConstDecl("b",None,IntLiteral(1))]))]))])

#             self.assertTrue(TestChecker.test(
#                 input, "Redeclared Constant: b\n", inspect.stack()[0].function))
        
    # TEST_154
    def test_049(self):
        """
            func foo() {
                putFloat(getInt());
            }
        """
        input = Program([FuncDecl("foo",[],VoidType(),Block([FuncCall("putFloat",[FuncCall("getInt",[])])]))])
        self.assertTrue(TestChecker.test(
            input, """Type Mismatch: FuncCall(putFloat,[FuncCall(getInt,[])])\n""", inspect.stack()[0].function))
        
    def test_050(self):
            """

func foo() int {
    var a = 1;
    if (a < 3) {
        var a = 1;
    } else if(a > 2) {
        var a = 2;
    }
    return a;
}
        
            """
            input = Program([FuncDecl("foo",[],IntType(),Block([VarDecl("a", None,IntLiteral(1)),If(BinaryOp("<", Id("a"), IntLiteral(3)), Block([VarDecl("a", None,IntLiteral(1))]), If(BinaryOp(">", Id("a"), IntLiteral(2)), Block([VarDecl("a", None,IntLiteral(2))]), None)),Return(Id("a"))]))])

            self.assertTrue(TestChecker.test(
                input, "", inspect.stack()[0].function))
        
        
    def test_051(self):
            """

func foo() {
    var a [5][6] int;
    var b [2] float;
    b[2] := a[2][3]
    a[2][3] := b[2] + 1;
}
        
            """
            input = Program([FuncDecl("foo",[],VoidType(),Block([VarDecl("a",ArrayType([IntLiteral(5),IntLiteral(6)],IntType()), None),VarDecl("b",ArrayType([IntLiteral(2)],FloatType()), None),Assign(ArrayCell(Id("b"),[IntLiteral(2)]),ArrayCell(Id("a"),[IntLiteral(2),IntLiteral(3)])),Assign(ArrayCell(Id("a"),[IntLiteral(2),IntLiteral(3)]),BinaryOp("+", ArrayCell(Id("b"),[IntLiteral(2)]), IntLiteral(1)))]))])

            self.assertTrue(TestChecker.test(
                input, """Type Mismatch: Assign(ArrayCell(Id(a),[IntLiteral(2),IntLiteral(3)]),BinaryOp(ArrayCell(Id(b),[IntLiteral(2)]),+,IntLiteral(1)))\n""", inspect.stack()[0].function))
        
        
    def test_052(self):
            """
var A = 1;
type A struct {a int;}
        
            """
            input = Program([VarDecl("A", None,IntLiteral(1)),StructType("A",[("a",IntType())],[])])

            self.assertTrue(TestChecker.test(
                input, "Redeclared Type: A\n", inspect.stack()[0].function))
        
        
    def test_053(self):
            """
            
const A = 2;
type A interface {foo();}
        
            """
            input = Program([ConstDecl("A",None,IntLiteral(2)),InterfaceType("A",[Prototype("foo",[],VoidType())])])

            self.assertTrue(TestChecker.test(
                input, "Redeclared Type: A\n", inspect.stack()[0].function))
        
    def test_054(self):
            """

type A interface {foo();}
var A = 1;
        
            """
            input = Program([InterfaceType("A",[Prototype("foo",[],VoidType())]),VarDecl("A", None,IntLiteral(1))])

            self.assertTrue(TestChecker.test(
                input, "Redeclared Variable: A\n", inspect.stack()[0].function))
        
    def test_055(self):
            """

type S1 struct {votien int;}
type I1 interface {votien();}

func (s S1) votien() {return;}

var b [2] S1;
var a [2] I1 = b;
        
            """
            input = Program([StructType("S1",[("votien",IntType())],[]),InterfaceType("I1",[Prototype("votien",[],VoidType())]),MethodDecl("s",Id("S1"),FuncDecl("votien",[],VoidType(),Block([Return(None)]))),VarDecl("b",ArrayType([IntLiteral(2)],Id("S1")), None),VarDecl("a",ArrayType([IntLiteral(2)],Id("I1")),Id("b"))])

            self.assertTrue(TestChecker.test(
                input, """Redeclared Method: votien\n""", inspect.stack()[0].function))
        
    def test_056(self):
            """

func votien(a  [2]int ) {
    votien([3] int {1,2,3})
}
    
            """
            input = Program([FuncDecl("votien",[ParamDecl("a",ArrayType([IntLiteral(2)],IntType()))],VoidType(),Block([FuncCall("votien",[ArrayLiteral([IntLiteral(3)],IntType(),[IntLiteral(1),IntLiteral(2),IntLiteral(3)])])]))])

            self.assertTrue(TestChecker.test(
                input, """Type Mismatch: FuncCall(votien,[ArrayLiteral([IntLiteral(3)],IntType,[IntLiteral(1),IntLiteral(2),IntLiteral(3)])])\n""", inspect.stack()[0].function))
        
    def test_057(self):
            """

type K struct {a int;}
func (k K) koo(a [1 + 2] int) {return;}
type H interface {koo(a [1 + 2] int);}

const c = 4;
func foo() {
    var k H;
    k.koo([c - 1] int {1,2,3})
} 
        
            """
            input = Program([StructType("K",[("a",IntType())],[]),MethodDecl("k",Id("K"),FuncDecl("koo",[ParamDecl("a",ArrayType([BinaryOp("+", IntLiteral(1), IntLiteral(2))],IntType()))],VoidType(),Block([Return(None)]))),InterfaceType("H",[Prototype("koo",[ArrayType([BinaryOp("+", IntLiteral(1), IntLiteral(2))],IntType())],VoidType())]),ConstDecl("c",None,IntLiteral(4)),FuncDecl("foo",[],VoidType(),Block([VarDecl("k",Id("H"), None),MethCall(Id("k"),"koo",[ArrayLiteral([BinaryOp("-", Id("c"), IntLiteral(1))],IntType(),[IntLiteral(1),IntLiteral(2),IntLiteral(3)])])]))])

            self.assertTrue(TestChecker.test(
                input, "", inspect.stack()[0].function))
        
    def test_058(self):
            """

var v TIEN;
func (v TIEN) foo (v int) int {
    return v;
}

type TIEN struct {
    Votien int;
}
        
            """
            input = Program([VarDecl("v",Id("TIEN"), None),MethodDecl("v",Id("TIEN"),FuncDecl("foo",[ParamDecl("v",IntType())],IntType(),Block([Return(Id("v"))]))),StructType("TIEN",[("Votien",IntType())],[])])

            self.assertTrue(TestChecker.test(
                input, "", inspect.stack()[0].function))
        
    def test_059(self):
            """

func foo() [2] float {
    return [2] float {1.0, 2.0};
    return [2] int {1, 2};
}
     
            """
            input = Program([FuncDecl("foo",[],ArrayType([IntLiteral(2)],FloatType()),Block([Return(ArrayLiteral([IntLiteral(2)],FloatType(),[FloatLiteral(1.0),FloatLiteral(2.0)])),Return(ArrayLiteral([IntLiteral(2)],IntType(),[IntLiteral(1),IntLiteral(2)]))]))])

            self.assertTrue(TestChecker.test(
                input, "Type Mismatch: Return(ArrayLiteral([IntLiteral(2)],IntType,[IntLiteral(1),IntLiteral(2)]))\n", inspect.stack()[0].function))
        
#     def test_060(self):
#             """

# // Thank you for participating in the PPL2 course
# // The teacher won't check this, just ignore it, testing too much.
# const a = 2;
# type STRUCT struct {x [a] int;}
# func (s STRUCT) foo(x [a] int) [a] int {return s.x;}
# func foo(x [a] int) [a] int  {
#     const a = 3;
#     return [a] int {1,2};
# }
        
#             """
#             input = Program([ConstDecl("a",None,IntLiteral(2)),StructType("STRUCT",[("x",ArrayType([Id("a")],IntType()))],[]),MethodDecl("s",Id("STRUCT"),FuncDecl("foo",[ParamDecl("x",ArrayType([Id("a")],IntType()))],ArrayType([Id("a")],IntType()),Block([Return(FieldAccess(Id("s"),"x"))]))),FuncDecl("foo",[ParamDecl("x",ArrayType([Id("a")],IntType()))],ArrayType([Id("a")],IntType()),Block([ConstDecl("a",None,IntLiteral(3)),Return(ArrayLiteral([Id("a")],IntType(),[IntLiteral(1),IntLiteral(2)]))]))])

#             self.assertTrue(TestChecker.test(
#                 input, """Type Mismatch: Return(ArrayLiteral([Id("a")],IntType(),[IntLiteral(1),IntLiteral(2)]))""", inspect.stack()[0].function))
        
#     def test_060(self):
#             """

# func (v TIEN) Votien () {return ;}
# type TIEN struct {
#     Votien int;
# }
    
#             """
#             input = Program([MethodDecl("v",Id("TIEN"),FuncDecl("Votien",[],VoidType(),Block([Return(None)]))),StructType("TIEN",[("Votien",IntType())],[])])


#             self.assertTrue(TestChecker.test(
#                 input, "Redeclared Field: Votien\n", inspect.stack()[0].function))